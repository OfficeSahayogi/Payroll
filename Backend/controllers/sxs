export const getAttendanceDataForEmployees = async (req, res) => {
  try {
    const { date, org } = req.body;

    if (!date) {
      return res.status(400).json({ success: false, message: "Date is required." });
    }

    // Parse the date and normalize to UTC
    const selectedDate = new Date(date);
    selectedDate.setUTCHours(0, 0, 0, 0); // Normalize to the start of the day in UTC
    const year = selectedDate.getUTCFullYear();
    const month = (selectedDate.getUTCMonth() + 1).toString().padStart(2, "0");
    const dateKey = selectedDate.toISOString().split("T")[0]; // Use 'YYYY-MM-DD' as the date key

    // Fetch employees whose DOJ is on or before the selected date
    const query = { doj: { $lte: selectedDate }, isDeleted: false };
    if (org) query.org = org;

    
    const employees = await Employee.find(query);

    if (employees.length === 0) {
      return res.status(404).json({ success: true, message: "No employees found for the given criteria." });
    }

    // Fetch attendance records for these employees for the selected year and month
    const attendanceRecords = await Attendance.find({
      employeeId: { $in: employees.map((emp) => emp._id) },
      year,
      month,
    });

   

    // Merge attendance data with employee data for the specific date
    const attendanceData = employees.map((employee) => {
      const attendanceRecord = attendanceRecords.find(
        (record) => record.employeeId.toString() === employee._id.toString()
      );
    
      
    
      // Default attendance
      const attendance = {
        employeeId: employee._id,
        name: employee.name,
        doj: employee.doj,
        empCode: employee.empCode,
        salaryType: employee.salaryType,
        salary:employee.salary,
        status: "Absent", // Default to 'Absent'
        hoursWorked: 0, // Default to 0 hours
      };
    
      // Check if attendanceRecord exists and retrieve data for the dateKey
      if (attendanceRecord) {
        let dailyAttendance;
    
        if (attendanceRecord.attendance instanceof Map) {
          dailyAttendance = attendanceRecord.attendance.get(dateKey);
        } else {
          dailyAttendance = attendanceRecord.attendance[dateKey];
        }
    
        if (dailyAttendance) {
          attendance.status = dailyAttendance.status;
          attendance.hoursWorked = dailyAttendance.hoursWorked;
        }
      }
    
      return attendance;
    });
    
    console.log("final",attendanceData)
  
    return res.status(200).json({ success: true, attendanceData });
  } catch (error) {
    console.error("Error fetching attendance data:", error);
    return res.status(500).json({ success: false, message: error.message });
  }
};